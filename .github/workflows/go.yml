name: Go

on:
  push: {}
  pull_request:
    branches: [ main ]

jobs:

  determine_version:
    name: Get Version Number
    runs-on: ubuntu-latest
    outputs:
      version_number: ${{ steps.get_version.outputs.version }}
      matching_tag: ${{ steps.get_matching_tag.outputs.tag }}
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.15
      id: go
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - id: get_version
      name: Get version from command line
      run: |
        APP_VERSION="$(go run . --version)"
        echo ::set-output name=version::${APP_VERSION}
        echo "APP_VERSION: ${APP_VERSION}"
    - id: get_matching_tag
      name: Check if existing tag exists
      run: |
        git fetch --tags
        APP_VERSION="${{ steps.get_version.outputs.version }}"
        echo "APP_VERSION: ${APP_VERSION}"
        MATCHING_TAG="$(git tag --list | grep '^${APP_VERSION}$' || true)"
        echo ::set-output name=tag::${MATCHING_TAG}
        echo "MATCHING_TAG: ${MATCHING_TAG}"

  build_go:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.15
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Some debugging command
      run: git fetch --tags && git tag --list

    - name: Build
      run: auto/build

    - name: Test
      run: |
        build/dhook_linux_amd64 -version
        go test -v .

    - name: Upload build artefacts
      uses: actions/upload-artifact@v2
      with:
        name: binaries
        path: build/dhook_*
